"0",""
"0","# Function to calculate weights for each row"
"0","calculate_weight <- function(data, column, dist) {"
"0","  factor_column <- factor(data[[column]], levels = names(dist))"
"0","  proportions <- table(factor_column) / nrow(data)"
"0",""
"0","  # Handle NA values"
"0","  factor_column[is.na(factor_column)] <- ""NA"""
"0","  proportions[""NA""] <- 1"
"0",""
"0","  weights <- vector(""numeric"", length = nrow(data))"
"0","  for (i in 1:nrow(data)) {"
"0","    cat <- as.character(factor_column[i])"
"0","    weights[i] <- dist[cat] / proportions[cat]"
"0","  }"
"0",""
"0","  return(weights)"
"0","}"
"0",""
"0","# Applying the function to each column"
"0","dfcj$gender_weight <- calculate_weight(dfcj, ""gender"", gender_dist)"
"2","Warning: invalid factor level, NA generated"
"0","dfcj$age_weight <- calculate_weight(dfcj, ""age.cat"", age_dist)"
"2","Warning: invalid factor level, NA generated"
"0","dfcj$income_weight <- calculate_weight(dfcj, ""income"", income_dist)"
"2","Warning: invalid factor level, NA generated"
"0","dfcj$education_weight <- calculate_weight(dfcj, ""education"", education_dist)"
"2","Warning: invalid factor level, NA generated"
"0","# View the first few entries"
"0",""
"0","sum(is.na(dfcj$age_weight))"
"1","[1]"
"1"," 0"
"1","
"
